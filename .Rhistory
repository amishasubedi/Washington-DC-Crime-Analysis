kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 5 table
bottom_5_kable <- kable(bottom_5_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 5 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_5_kable
bottom_5_kable
# Define the latitude and longitude boundaries for Washington D.C.
dc_lat_min <- 38.79163
dc_lat_max <- 38.99598
dc_long_min <- -77.11976
dc_long_max <- -76.90940
metro_location <- metro_stations %>%
select(lat = Y, long = X, station_name = BSTP_MSG_TEXT, WARD_ID) %>%
filter(!is.na(lat) & !is.na(long)) %>%
filter(lat >= dc_lat_min & lat <= dc_lat_max & long >= dc_long_min & long <= dc_long_max)
# violent crime rate per clusters
violent_rate_per_cluster <- dc_crime_demography_long %>%
filter(offensegroup == "violent", !Cluster_Id %in% c("cluster 42", "cluster 45", "cluster 46", "cluster 43")) %>%
group_by(Cluster_Id) %>%
summarise(violent_count = n(), Total_Population = unique(Total_Population.x)) %>%
mutate(violent_rate = (violent_count / Total_Population) * 1000)
pacman::p_load(tidyverse, readr, stringr, dplyr, usmap, sf, leaflet, rnaturalearth,
gridExtra, leaflet, leaflet.extras, ggrepel, kableExtra, knitr)
# violent crime rate per clusters
violent_rate_per_cluster <- dc_crime_demography_long %>%
filter(offensegroup == "violent", !Cluster_Id %in% c("cluster 42", "cluster 45", "cluster 46", "cluster 43")) %>%
group_by(Cluster_Id) %>%
summarise(violent_count = n(), Total_Population = unique(Total_Population.x)) %>%
mutate(violent_rate = (violent_count / Total_Population) * 1000)
# top 10 cluster with highest violent crime rate
top_10_clusters <- violent_rate_per_cluster %>%
arrange(desc(violent_rate)) %>%
slice_head(n = 10)
# bottom 10 with lowest violent crime rate
bottom_10_clusters <- violent_rate_per_cluster %>%
arrange(violent_rate) %>%
slice_head(n = 10)
# Create ggplot for Top 10 Clusters
top_10_plot <- ggplot(top_10_clusters, aes(x = reorder(Cluster_Id, violent_rate), y = violent_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Clusters",
subtitle = "Violent Crime Rate",
x = "Cluster ID",
y = "Violent Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Create ggplot for Bottom 10 Clusters
bottom_10_plot <- ggplot(bottom_10_clusters, aes(x = reorder(Cluster_Id, violent_rate), y = violent_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Bottom 10 Clusters",
subtitle = "Violent Crime Rate",
x = "Cluster ID",
y = "Violent Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# grid arrange to compare both
grid.arrange(top_10_plot, bottom_10_plot, ncol = 2)
# Extract top 5 and bottom 5 clusters
top_5_clusters <- head(top_10_clusters, 5)
bottom_5_clusters <- head(bottom_10_clusters, 5)
# Aggregate population data
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Calculate percentage for top 5
top_5_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_5_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Repeat for bottom 5
bottom_5_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_5_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Plotting for top 5
top_5_plot <- ggplot(top_5_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Top 5 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
# Plotting for bottom 5
bottom_5_plot <- ggplot(bottom_5_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Bottom 5 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
top_5_plot
bottom_5_plot
# Aggregate population data
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Calculate percentage for top 5
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Repeat for bottom 5
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Plotting for top 5
top_10_plot <- ggplot(top_10_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Top 10 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
# Plotting for bottom 5
bottom_10_plot <- ggplot(bottom_10_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Bottom 10 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
top_5_plot
bottom_5_plot
# Aggregate population data
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Calculate percentage for top 5
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Repeat for bottom 5
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_clusters$Cluster_Id) %>%
group_by(Cluster_Id, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Plotting for top 5
top_10_plot <- ggplot(top_10_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Top 10 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
# Plotting for bottom 5
bottom_10_plot <- ggplot(bottom_10_percent, aes(x = reorder(Race, Percentage), y = Percentage, fill = Race)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)), vjust = -0.5, size = 3) +
theme(legend.position = "right") +
facet_wrap(~Cluster_Id) +
labs(title = "Bottom 10 Clusters: Demographic Percentage", x = "Race", y = "Percentage")
top_10_plot
bottom_10_plot
# Property crime rate per clusters
property_rate_per_cluster <- dc_crime_demography_long %>%
filter(offensegroup == "property", !Cluster_Id %in% c("cluster 42", "cluster 45", "cluster 46", "cluster 43")) %>%
group_by(Cluster_Id) %>%
summarise(property_count = n(), Total_Population = unique(Total_Population.x)) %>%
mutate(property_rate = (property_count / Total_Population) * 1000)
# Top 10 clusters with highest property crime rate
top_10_property_clusters <- property_rate_per_cluster %>%
arrange(desc(property_rate)) %>%
slice_head(n = 10)
# Bottom 10 clusters with lowest property crime rate
bottom_10_property_clusters <- property_rate_per_cluster %>%
arrange(property_rate) %>%
slice_head(n = 10)
# Create ggplot for Top 10 Property Crime Clusters
top_10_property_plot <- ggplot(top_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Create ggplot for Bottom 10 Property Crime Clusters
bottom_10_property_plot <- ggplot(bottom_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Bottom 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Grid arrange to compare both
grid.arrange(top_10_property_plot, bottom_10_property_plot, ncol = 2)
# Calculate the total population for each cluster
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Filter the dataset for only the top 10 clusters and calculate the demographic percentage
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the top 10 data for display, removing population counts and pivoting races into columns
top_10_percent <- top_5_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Repeat the same percentage calculation process for the bottom 10 clusters
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the bottom 5 data for display, similar to the top 10 clusters
bottom_10_percent <- bottom_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Generate a styled table for the top 5 clusters with kable and kableExtra
top_10_kable <- kable(top_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in top 5 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 10 table
bottom_10_kable <- kable(bottom_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 5 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_10_kable
bottom_10_kable
# Calculate the total population for each cluster
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Filter the dataset for only the top 10 clusters and calculate the demographic percentage
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the top 10 data for display, removing population counts and pivoting races into columns
top_10_percent <- top_5_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Repeat the same percentage calculation process for the bottom 10 clusters
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the bottom 5 data for display, similar to the top 10 clusters
bottom_10_percent <- bottom_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Generate a styled table for the top 5 clusters with kable and kableExtra
top_10_kable <- kable(top_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in top 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 10 table
bottom_10_kable <- kable(bottom_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_10_kable
bottom_10_kable
# Calculate the total population for each cluster
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Filter the dataset for only the top 10 clusters and calculate the demographic percentage
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the top 10 data for display, removing population counts and pivoting races into columns
top_10_percent <- top_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Repeat the same percentage calculation process for the bottom 10 clusters
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the bottom 5 data for display, similar to the top 10 clusters
bottom_10_percent <- bottom_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Generate a styled table for the top 5 clusters with kable and kableExtra
top_10_kable <- kable(top_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in top 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 10 table
bottom_10_kable <- kable(bottom_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_10_kable
bottom_10_kable
# Property crime rate per clusters
property_rate_per_cluster <- dc_crime_demography_long %>%
filter(offensegroup == "property", !Cluster_Id %in% c("cluster 42", "cluster 45", "cluster 46", "cluster 43")) %>%
group_by(Cluster_Id) %>%
summarise(property_count = n(), Total_Population = unique(Total_Population.x)) %>%
mutate(property_rate = (property_count / Total_Population) * 1000)
# Top 10 clusters with highest property crime rate
top_10_property_clusters <- property_rate_per_cluster %>%
arrange(desc(property_rate)) %>%
slice_head(n = 10)
# Bottom 10 clusters with lowest property crime rate
bottom_10_property_clusters <- property_rate_per_cluster %>%
arrange(property_rate) %>%
slice_head(n = 10)
# Create ggplot for Top 10 Property Crime Clusters
top_10_property_plot <- ggplot(top_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Create ggplot for Bottom 10 Property Crime Clusters
bottom_10_property_plot <- ggplot(bottom_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Bottom 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Grid arrange to compare both
grid.arrange(top_10_property_plot, bottom_10_property_plot, ncol = 2)
# Calculate the total population for each cluster
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Filter the dataset for only the top 10 clusters and calculate the demographic percentage
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the top 10 data for display, removing population counts and pivoting races into columns
top_10_percent <- top_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Repeat the same percentage calculation process for the bottom 10 clusters
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the bottom 5 data for display, similar to the top 10 clusters
bottom_10_percent <- bottom_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Generate a styled table for the top 5 clusters with kable and kableExtra
top_10_kable <- kable(top_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in top 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 10 table
bottom_10_kable <- kable(bottom_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_10_kable
bottom_10_kable
# Property crime rate per clusters
property_rate_per_cluster <- dc_crime_demography_long %>%
filter(offensegroup == "property", !Cluster_Id %in% c("cluster 42", "cluster 45", "cluster 46", "cluster 43")) %>%
group_by(Cluster_Id) %>%
summarise(property_count = n(), Total_Population = unique(Total_Population.x)) %>%
mutate(property_rate = (property_count / Total_Population) * 1000)
# Top 10 clusters with highest property crime rate
top_10_property_clusters <- property_rate_per_cluster %>%
arrange(desc(property_rate)) %>%
slice_head(n = 10)
# Bottom 10 clusters with lowest property crime rate
bottom_10_property_clusters <- property_rate_per_cluster %>%
arrange(property_rate) %>%
slice_head(n = 10)
# Create ggplot for Top 10 Property Crime Clusters
top_10_property_plot <- ggplot(top_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Create ggplot for Bottom 10 Property Crime Clusters
bottom_10_property_plot <- ggplot(bottom_10_property_clusters, aes(x = reorder(Cluster_Id, property_rate), y = property_rate, fill = Cluster_Id)) +
geom_bar(stat = "identity") +
labs(title = "Bottom 10 Clusters",
subtitle = "Property Crime Rate",
x = "Cluster ID",
y = "Property Crime Rate per 1000 Residents") +
theme_minimal() +
theme(legend.position = "none") +
coord_flip() +
scale_fill_brewer(palette = "Set3")
# Grid arrange to compare both
grid.arrange(top_10_property_plot, bottom_10_property_plot, ncol = 2)
# Calculate the total population for each cluster
total_population <- dc_crime_demography_long %>%
group_by(Cluster_Id) %>%
summarise(Total_Pop = sum(Population_Count))
# Filter the dataset for only the top 10 clusters and calculate the demographic percentage
top_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% top_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the top 10 data for display, removing population counts and pivoting races into columns
top_10_percent <- top_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Repeat the same percentage calculation process for the bottom 10 clusters
bottom_10_percent <- dc_crime_demography_long %>%
filter(Cluster_Id %in% bottom_10_property_clusters$Cluster_Id) %>%
group_by(Cluster_Id, counties, Race) %>%
summarise(Demo_Pop = sum(Population_Count)) %>%
left_join(total_population, by = "Cluster_Id") %>%
mutate(Percentage = (Demo_Pop / Total_Pop) * 100)
# Prepare the bottom 5 data for display, similar to the top 10 clusters
bottom_10_percent <- bottom_10_percent %>%
select(-Demo_Pop, -Total_Pop) %>%
pivot_wider(names_from = Race, values_from = Percentage) %>%
mutate(Asian = sprintf("%.2f", Asian)) %>%
mutate(across(-1, ~sprintf("%.2f", .)))
# Generate a styled table for the top 5 clusters with kable and kableExtra
top_10_kable <- kable(top_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in top 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Generate a styled table for the bottom 5 clusters, similar to the top 10 table
bottom_10_kable <- kable(bottom_10_percent, format = table_format, caption = "Demographic Breakdown of Property Crime Perpetrators in bottom 10 neighborhood") %>%
kable_styling(bootstrap_options = "striped", full_width = F, latex_options = "HOLD_position") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows(columns = 1, valign = "top")
# Render both tables in the output
top_10_kable
bottom_10_kable
